#ifndef __PUB_STRING_H__
#define __PUB_STRING_H__

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <stdarg.h>

/**
 * The function checks if a given string consists only of digits.
 *
 * @param str a pointer to a character array (string) that needs to be checked for containing only
 * digits (0-9).
 * @param len The length of the string that is being checked for digits.
 *
 * @return a boolean value (either true or false) depending on whether the input string contains only
 * digits or not.
 */
bool pub_isdigits(const char *str, int len);

bool pub_ishexs(const char *str, int len);

/**
 * The function takes a string and converts all lowercase letters to uppercase letters, returning the resulting string.
 *
 * @param src A pointer to the beginning of the input string that needs to be converted to uppercase.
 * @param out The pointer to the destination string where the converted string will be stored.
 * The out allowed to equal the src, As it can save result to source buffer.
 * @param size The maximum size of the output string (out) that can be generated by the function.
 *
 * @return a pointer to the modified string 'out', which contains the uppercase version of the input
 * string 'src'.
 */
char *pub_string2upper(char *src, char *out, int size);

/**
 * The function converts a given string to lowercase and returns the converted string.
 *
 * @param src A pointer to the input string that needs to be converted to lowercase.
 * @param out The pointer to the destination buffer where the converted string will be stored.
  * The out allowed to equal the src, As it can save result to source buffer.
* @param max_size The maximum size of the output string (out) that can be generated by the function.
 *
 * @return a pointer to the character array "out", which contains the converted string in lowercase.
 */
char *pub_string2lower(char *src, char *out, int size);

/**
 * The function counts the maximum number of consecutive occurrences of a given character in a string.
 *
 * @param check a character that we want to count the maximum consecutive occurrences of in the source
 * string.
 * @param src A pointer to a constant character string that will be searched for the specified
 * character.
 *
 * @return an integer value, which represents the maximum count of consecutive occurrences of a given
 * character in a given string.
 */
int pub_strmaxserilcount(const char *src, char check);

/**
 * The function removes consecutive duplicate characters from a string and returns the cleaned string.
 *
 * @param src A pointer to the source string that needs to be cleaned.
 * @param out The output buffer where the cleaned string will be stored.
 * The out allowed to equal the src, As it can save result to source buffer.
 * @param size The maximum size of the output string (including the null terminator).
 * @param clchrset clchrset is a string containing characters that will be cleaned.
 *
 * @return a pointer to a character array (char *) named "out".
 */
char *pub_strserilclean(char *src, char *out, int size, char *clchrset);

/**
 * The function removes specified characters from the beginning and end of a string.
 *
 * @param src A pointer to the source string that needs to be stripped.
 * @param out a pointer to the output buffer where the stripped string will be stored
 * The out allowed to equal the src, As it can save result to source buffer.
 * @param size The maximum length of the output string (including the null terminator).
 * @param strips A string containing characters to be stripped from the beginning and end of the source
 * string.
 *
 * @return a pointer to the stripped string (i.e. the "out" parameter).
 */
char *pub_strstrip(char *src, char *out, int size, const char *strips);
#define pub_strstripsimple(src) pub_strstrip(src,NULL,0,NULL)

/**
 * The function counts the number of occurrences of a substring within a given string.
 *
 * @param string A pointer to a null-terminated string that we want to search for occurrences of the
 * substring "sub".
 * @param sub The substring that we want to count in the given string.
 *
 * @return an integer value which represents the number of times the substring `sub` appears in the
 * string `string`.
 */
int pub_strsubcount(const char *string, const char *sub);

/**
 * The function counts the number of occurrences of a given character in a string.
 *
 * @param string A pointer to a null-terminated string that we want to search for occurrences of a
 * specific character.
 * @param chr The character to be counted in the string.
 *
 * @return The function `pub_strchrcount` returns an integer value which represents the number of
 * occurrences of a given character `chr` in a given string `string`.
 */
int pub_strchrcount(const char *string, const char chr);

/**
 * The function replaces all occurrences of a substring in a given string with a replacement substring
 * and returns the modified string.
 *
 * @param src A pointer to the source string that needs to be searched and have substrings replaced.
 * @param out The output buffer where the modified string will be stored.
 * The out not allowed to equal src, as the length of subreplace may lager than the length of sub.
 * @param size The maximum size of the output buffer 'out'.
 * @param sub The substring to be replaced in the source string.
 * @param subreplace The string that will replace the substring "sub" in the source string "src".
 */
char *pub_strreplace(char *src, char *out, int size, const char *sub, const char *subreplace);

/**
 * The function extracts the directory path from a given file path and returns it in a specified output
 * buffer.
 *
 * @param src A pointer to a string containing the source directory path.
 * @param out The output buffer where the function will store the result (directory path).
 * The out allowed to equal the src, As it can save result to source buffer.
 * @param size The maximum size of the output string (including the null terminator).
 *
 * @return a pointer to a character array (char *) named "out".
 */
char *pub_strdir(char *src, char *out, int size);

/**
 * The function extracts the file name from a given file path and copies it to a specified output
 * buffer.
 *
 * @param src A pointer to a string that represents a file path.
 * @param out The output buffer where the function will store the result (the string without the directory path).
 * The out allowed to equal the src, As it can save result to source buffer.
 * @param size The maximum size of the output string (including the null terminator).
 *
 * @return a pointer to a character array (char *) which contains the name of the file without the
 * directory path.
 */
char *pub_strnotdir(char *src, char *out, int size);

static inline int pub_snprintf(char *buf, int size, const char *fmt, ...)
{
    int ret = 0;
    va_list ap;

    va_start(ap, fmt);
    ret = vsnprintf(buf, size, fmt, ap);
    va_end(ap);

    return ret;
}

static inline void pub_bzero(void *buf, int size)
{
    memset(buf, 0, size);
}

static inline bool pub_strcmpwithlen(const char *str1, const char *str2)
{
    if (0 == strcmp(str1, str2) && strlen(str1) == strlen(str2))
        return true;

    return false;
}

static inline bool pub_strcmpEx(const char *str1, const char *str2, unsigned int len)
{
    if (0 == len)
    {
        if (0 == strcmp(str1, str2) && strlen(str1) == strlen(str2))
            return true;
    }
    else
    {
        if (0 == memcmp(str1, str2, len))
            return true;
    }

    return false;
}

static inline bool pub_strcasecmpwithlen(const char *str1, const char *str2)
{
    if (0 == strcasecmp(str1, str2) && strlen(str1) == strlen(str2))
        return true;

    return false;
}

static inline char *pub_strjumpspace(char *str)
{
    char *p = str;

    for (p = str; '\0' != *p && (' ' == *p || '\t' == *p); p++);

    return p;
}

char *pub_strtok_r(char *s, const char *sep, char **lasts);


#endif /* __PUB_STRING_H__ */
